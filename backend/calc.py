import vtkmodules.all as vtk
from vtkmodules.util import *
from vtkmodules.util import *
from vtkmodules.util.vtkImageImportFromArray import *
#import vtkmodules.all as vtk
import SimpleITK as sitk
import numpy as np
import time
import datetime
import os
import sys
import nibabel as nib



name=['背景','脾脏','右肾','左肾','胆囊','食管','肝脏','胃','主动脉','下腔动脉','胰腺','右肾上腺','左肾上腺','十二指肠','膀胱','前列腺/子宫',]
def calc():
    start = datetime.datetime.now()
    # path = '../vtk/nii_data_low/1_1.nii' #segmentation volume
    '''3a93b3d5-b8be-4b6f-bd00-922d6080d9fb.nii.gz'''
    path = r'./backend/after.nii.gz'
    ds = sitk.ReadImage(path)  #读取nii数据的第一个函数sitk.ReadImage
    #print('ds: ',ds)
    data = sitk.GetArrayFromImage(ds)     #把itk.image转为array
    #print('data: ',data)
    #print('shape_of_data',data.shape)
    pt = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    Num = 0
    start = datetime.datetime.now()
    for i in range(data.shape[0]):
        for j in range(data.shape[1]):
            for k in range(data.shape[2]):
                '''if(data[i][j][k] == 6) :
                    data[i][j][k] = 300 '''
                #print(data[i][j][k])
                if pt[data[i][j][k]] == 0 and data[i][j][k] != 0:
                    Num+=1
                if data[i][j][k] != 0:
                    pt[data[i][j][k]] += 1
    end = datetime.datetime.now()
    print(pt,Num,end-start)
    return f'{Num}'
ddata=[]
Data=[]
ex=[]
def summit():
    for iter in range(1,41):
        path = f'./backend/submit/{iter}.nii.gz'
        ds = sitk.ReadImage(path)  #读取nii数据的第一个函数sitk.ReadImage
        data = sitk.GetArrayFromImage(ds)     #把itk.image转为array
        pt = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        Pt = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        Num = 0
        EX=[]
        start = datetime.datetime.now()
        for i in range(data.shape[0]):
            for j in range(data.shape[1]):
                for k in range(data.shape[2]):
                    '''if(data[i][j][k] == 6) :
                        data[i][j][k] = 300 '''
                    #print(data[i][j][k])
                    if pt[data[i][j][k]] == 0 and data[i][j][k] != 0:
                        Num+=1
                    if data[i][j][k] != 0:
                        pt[data[i][j][k]] += 1
                        if i==0 or i == (data.shape[0]-1) or j==0 or j==(data.shape[1]-1) or k==0 or k==(data.shape[2]-1):
                            if data[i][j][k] not in EX:
                                EX.append(data[i][j][k])
        for i in range(len(pt)):
            Pt[i] = pt[i]/(data.shape[0]*data.shape[1]*data.shape[2])
        ddata.append(pt)
        Data.append(Pt)
        ex.append(EX)
        print(f"{iter}======{ddata}")
        print(f"{iter}======{Data}")
        print(f"{iter}======{ex}")
sizelist=[[0, 100289, 175575, 189907, 68373, 8748, 1208032, 156253, 67883, 40428, 76143, 4397, 4546, 24518, 481655, 20221], [0, 112070, 91063, 127001, 9381, 7675, 875858, 183346, 54347, 50692, 40680, 1689, 2249, 23537, 76022, 43541], [0, 156393, 71494, 123604, 99902, 8855, 1188065, 133737, 127568, 52836, 24312, 3309, 1402, 49226, 78347, 16102], [0, 493134, 431918, 418168, 64894, 25829, 1835415, 388570, 189574, 85495, 150402, 8091, 8982, 77543, 110488, 21050], [0, 70199, 84903, 90211, 14623, 1475, 670825, 116369, 19742, 29323, 41107, 1378, 1839, 31939, 20553, 10943], [0, 91054, 76710, 71175, 19918, 5393, 769845, 178594, 52644, 54039, 40276, 2240, 2883, 20863, 56293, 13747], [0, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [0, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [0, 92173, 51525, 48218, 2892, 6666, 736966, 335660, 53407, 37438, 45065, 1549, 1497, 50996, 109095, 32457], [0, 120007, 126578, 111685, 63734, 2712, 1111045, 217324, 46641, 44997, 74289, 3263, 3370, 48103, 54790, 17240], [0, 125060, 70373, 80605, 24772, 5605, 991234, 250803, 49823, 37998, 39722, 2843, 2832, 32756, 47419, 5644], [0, 66979, 104622, 124053, 14011, 1215, 755844, 173421, 25236, 40650, 49395, 1462, 2567, 41530, 18094, 53981], [0, 116913, 68706, 74100, 32115, 8885, 858471, 302284, 77937, 37157, 53292, 1807, 2835, 28409, 50988, 23370], [0, 37344, 77777, 84215, 1261, 0, 574355, 108420, 29550, 25562, 53444, 1484, 2293, 36413, 106140, 12342], [0, 140472, 67773, 63496, 16175, 10155, 760832, 109481, 52189, 58763, 53738, 1755, 1941, 27300, 60925, 23000], [0, 257078, 173651, 158715, 5159, 5083, 1305801, 140913, 42004, 44747, 84003, 4134, 4634, 53481, 87874, 85220], [0, 119110, 104151, 116665, 15642, 18170, 1015665, 598420, 102248, 55076, 71260, 2444, 2761, 39304, 178177, 123943], [0, 224578, 89340, 102612, 11224, 6792, 866308, 238801, 58673, 52208, 80075, 1690, 2270, 38474, 136614, 125092], [0, 105118, 151221, 176960, 20507, 6929, 1312595, 175735, 64811, 49962, 57991, 1616, 3851, 39652, 230504, 94841], [0, 54217, 95992, 126582, 471, 7781, 657371, 85358, 59083, 31684, 26427, 2118, 2725, 22929, 185872, 3185], [0, 209141, 396271, 328093, 73998, 14243, 2313931, 571868, 151127, 142322, 165994, 6914, 7739, 75911, 210127, 295517], [0, 147460, 87649, 80204, 17295, 8723, 817263, 149045, 59372, 37822, 48810, 1576, 2203, 28545, 24799, 25468], [0, 118072, 124845, 114323, 12741, 628, 795284, 91384, 30862, 61614, 65221, 2077, 2117, 33949, 20600, 15945]]
noperfect=[[8, 5], [8, 5], [8, 5, 9], [15, 8, 5], [1, 8, 7, 6, 9, 5], [8], [1, 7, 6, 8, 9, 5], [1, 7, 6, 8, 9, 5], [8, 5], [6, 8, 9, 5, 7], [8, 5], [1, 7, 10, 6, 8, 9, 5], [8, 5], [1, 6, 7, 8, 9], [8, 5, 9], [8, 5, 9], [], [8, 5], [8], [15, 8, 5], [8, 5, 9], [8, 5], [1, 6, 8, 7, 9, 5]]
Checkresult=[]
def check():
    for i in range(1,len(sizelist)):
        path = f'./backend/submit/{i}.nii.gz'
        ds = sitk.ReadImage(path)  #读取nii数据的第一个函数sitk.ReadImage
        spacing = ds.GetSpacing()   
        #print(spacing)3
        k = spacing[0]*spacing[1]*spacing[2]
        An=[]
        for k in range(len(sizelist[i])):
            if k in noperfect[i]:
                An.append(0)
            else:
                An.append(int(sizelist[i][k]*k))
        print(An)
        Checkresult.append(An)
    print(Checkresult)
Sizeforave=[[0, 112070, 182126, 381003, 37524, 0, 5255148, 1283422, 0, 456228, 406800, 18579, 26988, 305981, 1064308, 653115], [0, 156393, 142988, 370812, 399608, 0, 7128390, 936159, 0, 0, 243120, 36399, 16824, 639938, 1096858, 241530], [0, 493134, 863836, 1254504, 259576, 0, 11012490, 2719990, 0, 769455, 1504020, 89001, 107784, 1008059, 1546832, 0], [0, 0, 169806, 270633, 58492, 0, 0, 0, 0, 0, 411070, 15158, 22068, 415207, 287742, 164145], [0, 91054, 153420, 213525, 79672, 26965, 4619070, 1250158, 0, 486351, 402760, 24640, 34596, 271219, 788102, 206205], [0, 0, 148178, 249693, 9100, 0, 0, 0, 0, 0, 438470, 12353, 12564, 250198, 1548596, 744660], [0, 0, 148178, 249693, 9100, 0, 0, 0, 0, 0, 438470, 12353, 12564, 250198, 1548596, 744660], [0, 92173, 103050, 144654, 11568, 0, 4421796, 2349620, 0, 336942, 450650, 17039, 17964, 662948, 1527330, 486855], [0, 120007, 253156, 335055, 254936, 0, 0, 0, 0, 0, 742890, 35893, 40440, 625339, 767060, 258600], [0, 125060, 140746, 241815, 99088, 0, 5947404, 1755621, 0, 341982, 397220, 31273, 33984, 425828, 663866, 84660], [0, 0, 209244, 372159, 56044, 0, 0, 0, 0, 0, 0, 16082, 30804, 539890, 253316, 809715], [0, 116913, 137412, 222300, 128460, 0, 5150826, 2115988, 0, 334413, 532920, 19877, 34020, 369317, 713832, 350550], [0, 0, 155554, 252645, 5044, 0, 0, 0, 0, 0, 534440, 16324, 27516, 473369, 1485960, 185130], [0, 140472, 135546, 190488, 64700, 0, 4564992, 766367, 0, 0, 537380, 19305, 23292, 354900, 852950, 345000], [0, 257078, 347302, 476145, 20636, 0, 7834806, 986391, 0, 0, 840030, 45474, 55608, 695253, 1230236, 1278300], [0, 119110, 208302, 349995, 62568, 90850, 6093990, 4188940, 817984, 495684, 712600, 26884, 33132, 510952, 2494478, 1859145], [0, 224578, 178680, 307836, 44896, 0, 5197848, 1671607, 0, 469872, 800750, 18590, 27240, 500162, 1912596, 1876380], [0, 105118, 302442, 530880, 82028, 34645, 7875570, 1230145, 0, 449658, 579910, 17776, 46212, 515476, 3227056, 1422615], [0, 54217, 191984, 379746, 1884, 0, 3944226, 597506, 0, 285156, 264270, 23298, 32700, 298077, 2602208, 0], [0, 209141, 792542, 984279, 295992, 0, 13883586, 4003076, 0, 0, 1659940, 76054, 92868, 986843, 2941778, 4432755], [0, 147460, 175298, 240612, 69180, 0, 4903578, 1043315, 0, 340398, 488100, 17336, 26436, 371085, 347186, 382020], [0, 0, 249690, 342969, 50964, 0, 0, 0, 0, 0, 652210, 22847, 25404, 441337, 288400, 239175]]
def average():
    for j in range(len(Sizeforave[0])):
        sum=0
        num=0
        for i in range(len(Sizeforave)):
            sum+=Sizeforave[i][j]
            if Sizeforave[i][j] != 0:
                num+=1
        if num !=0:
            print(sum/num)
        else :
            print(0)

#C:\Users\86159\Desktop\vuenii\backend\submit\1.nii.gz

def qkcalc():
    start = datetime.datetime.now()
    label_path = r"C:\Users\86159\Desktop\vuenii\public\basic\after.nii.gz"
    label_obj = nib.load(label_path)
    label_array = label_obj.get_fdata()
    #print(f'label_path: {label_path}')
    # 查看label里面有几种值
    #print(f'标签中有几种值: {np.unique(label_array)}')
    # 查看每个标签对应多少像素
    #print(f'每个标签像素数量：',np.unique(label_array, return_counts=True))
    lt = np.unique(label_array, return_counts=True)
    print(lt[1][15])
    end = datetime.datetime.now()
    #print(end-start)

def stastic():
    Am=[]
    for i in range(1,41):
        
        label_path = f"C:\\Users\\86159\\Desktop\\vuenii\\backend\\submit\\{i}.nii.gz"
        label_obj = nib.load(label_path)
        label_array = label_obj.get_fdata()
        #print(f'label_path: {label_path}')
        # 查看label里面有几种值
        #print(f'标签中有几种值: {np.unique(label_array)}')
        # 查看每个标签对应多少像素
        #print(f'每个标签像素数量：',np.unique(label_array, return_counts=True))
        lt = np.unique(label_array, return_counts=True)
        print(lt[1])
        Am.append(lt[1].tolist())
        #print(end-start)
    print(Am)

def getspacing():
    Am=[]
    for iter in range(1,41):
        path = f'./backend/submit/{iter}.nii.gz'
        ds = sitk.ReadImage(path)  #读取nii数据的第一个函数sitk.ReadImage
        print(ds.GetSpacing())
        Am.append(ds.GetSpacing())
    print(Am)

spacingnum=[(0.5833333134651184, 0.5833333134651184, 5.0), (0.5885416865348816, 0.5885416865348816, 5.0), (0.4817708432674408, 0.4817708432674408, 5.0), (0.703125, 0.703125, 1.25), (0.6458333134651184, 0.6458333134651184, 5.0), (0.6328125, 0.6328125, 5.0), (0.640625, 0.640625, 5.0), (0.640625, 0.640625, 5.0), (0.5364583134651184, 0.5364583134651184, 5.0), (0.5625, 0.5625, 5.0), (0.6497395634651184, 0.6497395634651184, 5.0), (0.53515625, 0.53515625, 5.0), (0.6145833134651184, 0.6145833134651184, 5.0), (0.54296875, 0.54296875, 5.0), (0.53515625, 0.53515625, 5.0), (0.4622395932674408, 0.4622395932674408, 5.0), (0.79296875, 0.79296875, 2.0), (0.4973958432674408, 0.4973958432674408, 5.0), (0.4622395932674408, 0.4622395932674408, 5.0), (0.6458333134651184, 0.6458333134651184, 5.0), (0.6191409826278687, 0.6191409826278687, 1.25), (0.5247395634651184, 0.5247395634651184, 5.0), (0.4674479067325592, 0.4674479067325592, 5.0), (0.67578125, 0.67578125, 2.0), (0.6510416865348816, 0.6510416865348816, 5.0), (0.6432291865348816, 0.6432291865348816, 5.0), (0.6080729365348816, 0.6080729365348816, 5.0), (0.609375, 0.609375, 5.0), (0.62109375, 0.62109375, 5.0), (0.60546875, 0.60546875, 5.0), (0.6067708134651184, 0.6067708134651184, 5.0), (0.97265625, 0.97265625, 5.0), (0.5559895634651184, 0.5559895634651184, 5.0), (0.58203125, 0.58203125, 5.0), (0.748046875, 0.748046875, 2.0), (0.5520833134651184, 0.5520833134651184, 5.0), (0.703125, 0.703125, 5.0), (0.650390625, 0.650390625, 2.0), (0.62109375, 0.62109375, 2.0), (0.52734375, 0.52734375, 5.0)]
sizenum=[[60484200, 100289, 175575, 189907, 68373, 8748, 1208032, 156253, 67883, 40428, 76143, 4397, 4546, 24518, 481655, 20221], [51385009, 112070, 91063, 127001, 9381, 7675, 875858, 183346, 54347, 50692, 40680, 1689, 2249, 23537, 76022, 43541], [46230416, 156393, 71494, 123604, 99902, 8855, 1188065, 133737, 127568, 52836, 24312, 3309, 1402, 49226, 78347, 16102], [85081551, 493134, 431918, 418168, 64894, 25829, 1835415, 388570, 189574, 85495, 150402, 8091, 8982, 77543, 110488, 21050], [47749963, 70199, 84903, 90211, 14623, 1475, 670825, 116369, 19742, 29323, 41107, 1378, 1839, 31939, 20553, 10943], [55167430, 91054, 76710, 71175, 19918, 5393, 769845, 178594, 52644, 54039, 40276, 2240, 2883, 20863, 56293, 13747], [47550663, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [47550663, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [48529436, 92173, 51525, 48218, 2892, 6666, 736966, 335660, 53407, 37438, 45065, 1549, 1497, 50996, 109095, 32457], [49268910, 120007, 126578, 111685, 63734, 2712, 1111045, 217324, 46641, 44997, 74289, 3263, 3370, 48103, 54790, 17240], [60753855, 125060, 70373, 80605, 24772, 5605, 991234, 250803, 49823, 37998, 39722, 2843, 2832, 32756, 47419, 5644], [48072156, 66979, 104622, 124053, 14011, 1215, 755844, 173421, 25236, 40650, 49395, 1462, 2567, 41530, 18094, 53981], [59604427, 116913, 68706, 74100, 32115, 8885, 858471, 302284, 77937, 37157, 53292, 1807, 2835, 28409, 50988, 23370], [46625144, 37344, 77777, 84215, 1261, 574355, 108420, 29550, 25562, 53444, 1484, 2293, 36413, 106140, 12342], [49276869, 140472, 67773, 63496, 16175, 10155, 760832, 109481, 52189, 58763, 53738, 1755, 1941, 27300, 60925, 23000], [46502895, 257078, 173651, 158715, 5159, 5083, 1305801, 140913, 42004, 44747, 84003, 4134, 4634, 53481, 87874, 85220], [79750180, 119110, 104151, 116665, 15642, 18170, 1015665, 598420, 102248, 55076, 71260, 2444, 2761, 39304, 178177, 123943], [51049409, 224578, 89340, 102612, 11224, 6792, 866308, 238801, 58673, 52208, 80075, 1690, 2270, 38474, 136614, 125092], [52951163, 105118, 151221, 176960, 20507, 6929, 1312595, 175735, 64811, 49962, 57991, 1616, 3851, 39652, 230504, 94841], [58210429, 54217, 95992, 126582, 471, 7781, 657371, 85358, 59083, 31684, 26427, 2118, 2725, 22929, 185872, 3185], [79185028, 209141, 396271, 328093, 73998, 14243, 2313931, 571868, 151127, 142322, 165994, 6914, 7739, 75911, 210127, 295517], [52137750, 147460, 87649, 80204, 17295, 8723, 817263, 149045, 59372, 37822, 48810, 1576, 2203, 28545, 24799, 25468], [45106434, 118072, 124845, 114323, 12741, 628, 795284, 91384, 30862, 61614, 65221, 2077, 2117, 33949, 20600, 15945], [79739469, 242048, 131566, 158083, 70847, 25284, 1429192, 683766, 228366, 72317, 47442, 3997, 4257, 123412, 100465, 39137], [52650429, 59083, 60969, 66341, 5862, 5032, 509662, 138057, 34886, 29940, 39227, 1421, 1508, 24868, 37640, 9059], [49396848, 132733, 69660, 112073, 8659, 2233, 739734, 102716, 36504, 24967, 37933, 2107, 1312, 27724, 19076, 10585], [56886529, 120505, 104827, 99435, 4845, 3823, 916856, 634559, 40140, 43405, 70530, 1877, 2087, 27192, 17474, 8316], [30226725, 84077, 72570, 78943, 12255, 8968, 521477, 388604, 61196, 37757, 42977, 777, 1894, 24160, 92271, 64773], [57219043, 102254, 71721, 78202, 15390, 3906, 561002, 81895, 39517, 43845, 42614, 894, 1809, 28383, 44350, 57751], [55844164, 70631, 98823, 121980, 5338, 4007, 743765, 140156, 28651, 34525, 42425, 1864, 2506, 29267, 32773, 12053], [53546943, 72549, 97460, 78896, 4421, 1965, 664182, 180394, 37454, 41415, 54660, 2175, 2689, 17313, 37433, 13683], [21084512, 68007, 29921, 36681, 3450, 1345, 317169, 99226, 13924, 15599, 17981, 571, 576, 10454, 54891, 3645], [46775806, 122353, 71663, 75334, 4804, 2878, 809345, 279250, 20177, 44077, 70466, 2038, 2623, 35176, 28110, 21468], [60273147, 145288, 87608, 92266, 15007, 6543, 725712, 216875, 50526, 34105, 46448, 1429, 2698, 28673, 105140, 100055], [56267711, 160309, 126285, 144341, 31500, 15465, 1231985, 266980, 74626, 67088, 61724, 3184, 2893, 63341, 129766, 73058], [53097961, 192713, 67968, 88425, 1, 9634, 792829, 362652, 72084, 45517, 46126, 2367, 1915, 31478, 20634, 21328], [24524555, 239051, 73864, 74457, 4843, 9353, 954081, 113526, 60278, 47705, 50754, 1785, 2931, 23891, 22598, 10728], [52909226, 230015, 241368, 227830, 28881, 14233, 2476089, 264687, 115076, 128433, 88838, 7875, 7213, 68074, 39022, 38388], [58956985, 241104, 176643, 192126, 35155, 15143, 1360298, 693681, 90557, 72432, 66139, 3048, 3105, 54514, 10281, 156917], [47708051, 108705, 104246, 106312, 12536, 8777, 1061005, 217141, 44052, 34048, 64015, 1813, 2605, 23410, 37195, 11305]]

def final():
    Am=[]
    for i in range(len(sizenum)):
        for j in range(len(sizenum[i])):
            if j == 0:
                sizenum[i][j]=0
            else:
                sizenum[i][j]=int(spacingnum[i][0]*spacingnum[i][1]*spacingnum[i][2]*sizenum[i][j])
    print(sizenum)

Final = [[0, 170630, 298721, 323105, 116329, 14883, 2055332, 265847, 115495, 68783, 129548, 7481, 7734, 41714, 819482, 34403], [0, 194094, 157712, 219953, 16247, 13292, 1516904, 317538, 94123, 87793, 70453, 2925, 3895, 40763, 131663, 75408], [0, 181496, 82969, 143444, 115937, 10276, 1378768, 155203, 148044, 61317, 28214, 3840, 1627, 57127, 90922, 18686], [0, 304747, 266917, 258419, 40103, 15961, 1134251, 240128, 117153, 52834, 92945, 5000, 5550, 47920, 68279, 13008], [0, 146400, 177065, 188135, 30496, 3076, 1399007, 242687, 41172, 61153, 85728, 2873, 3835, 66608, 42863, 22821], [0, 182313, 153593, 142510, 39880, 10798, 1541428, 357591, 105406, 108200, 80642, 4485, 5772, 41773, 112713, 27525], [0, 211575, 152030, 170790, 4668, 2749, 1431131, 346681, 43668, 56440, 89974, 2304, 2148, 39492, 226980, 101869], [0, 211575, 152030, 170790, 4668, 2749, 1431131, 346681, 43668, 56440, 89974, 2304, 2148, 39492, 226980, 101869], [0, 132631, 74141, 69382, 4161, 9591, 1060448, 482993, 76849, 53870, 64845, 2228, 2154, 73380, 156980, 46703], [0, 189854, 200250, 176689, 100829, 4290, 1757707, 343813, 73787, 71186, 117527, 5162, 5331, 76100, 86679, 27274], [0, 263977, 148543, 170141, 52288, 11831, 2092304, 529396, 105166, 80206, 83845, 6001, 5977, 69141, 100092, 11913], [0, 95911, 149814, 177639, 20063, 1739, 1082339, 248332, 36136, 58209, 70731, 2093, 3675, 59469, 25909, 77298], [0, 220797, 129755, 139942, 60651, 16779, 1621276, 570882, 147188, 70173, 100645, 3412, 5354, 53652, 96294, 44135], [0, 201150, 97048, 90923, 23161, 14541, 1089481, 156772, 74732, 84146, 76950, 2513, 2779, 39092, 87242, 32935], [0, 274643, 185516, 169559, 5511, 5430, 1395022, 150541, 44874, 47804, 89742, 4416, 4950, 57135, 93878, 91042], [0, 149792, 130980, 146717, 19671, 22850, 1277299, 752572, 128586, 69263, 89616, 3073, 3472, 49428, 224075, 155870], [0, 277805, 110514, 126932, 13884, 8401, 1071634, 295399, 72579, 64581, 99053, 2090, 2808, 47592, 168993, 154740], [0, 112300, 161553, 189051, 21908, 7402, 1402280, 187742, 69239, 53375, 61953, 1726, 4114, 42361, 246253, 101321], [0, 113069, 200191, 263987, 982, 16227, 1370949, 178014, 123217, 66077, 55113, 4417, 5682, 47818, 387636, 6642], [0, 100213, 189880, 157212, 35457, 6824, 1108765, 274021, 72415, 68196, 79539, 3312, 3708, 36374, 100686, 141602], [0, 203016, 120671, 110421, 23811, 12009, 1125173, 205198, 81740, 52071, 67199, 2169, 3032, 39299, 34142, 35063], [0, 128998, 136397, 124902, 13920, 686, 868877, 99840, 33717, 67315, 71256, 2269, 2312, 37090, 22506, 17420], [0, 221077, 120167, 144386, 64708, 23093, 1305367, 624524, 208580, 66051, 43331, 3650, 3888, 112719, 91760, 35746], [0, 125213, 129210, 140594, 12423, 10664, 1080114, 292580, 73933, 63451, 83132, 3011, 3195, 52702, 79769, 19198], [0, 274587, 144106, 231847, 17913, 4619, 1530301, 212490, 75516, 51649, 78472, 4358, 2714, 57353, 39462, 21897], [0, 222785, 193800, 183831, 8957, 7067, 1695049, 1173149, 74209, 80245, 130393, 3470, 3858, 50271, 32305, 15374], [0, 156104, 134739, 146572, 22753, 16650, 968220, 721516, 113621, 70103, 79794, 1442, 3516, 44857, 171318, 120263], [0, 197226, 138334, 150835, 29684, 7533, 1082053, 157958, 76219, 84567, 82193, 1724, 3489, 54744, 85541, 111389], [0, 129463, 181138, 223584, 9784, 7344, 1363293, 256900, 52516, 63283, 77763, 3416, 4593, 53645, 60071, 22092], [0, 133552, 179409, 145236, 8138, 3617, 1222662, 332079, 68947, 76238, 100621, 4003, 4950, 31870, 68908, 25188], [0, 321693, 141535, 173512, 16319, 6362, 1500304, 469368, 65864, 73787, 85055, 2701, 2724, 49450, 259650, 17241], [0, 189111, 110763, 116437, 7425, 4448, 1250941, 431614, 31186, 68126, 108913, 3149, 4054, 54368, 43447, 33181], [0, 246089, 148390, 156280, 25418, 11082, 1229212, 367343, 85581, 57767, 78673, 2420, 4569, 48566, 178086, 169473], [0, 179409, 141331, 161538, 35253, 17307, 1378773, 298790, 83517, 75081, 69078, 3563, 3237, 70887, 145227, 81762], [0, 293690, 103581, 134757, 1, 14682, 1208255, 552674, 109854, 69366, 70295, 3607, 2918, 47971, 31445, 32503], [0, 590915, 182586, 184052, 11971, 23119, 2358415, 280627, 149002, 117923, 125460, 4412, 7245, 59056, 55860, 26518], [0, 194596, 204201, 192747, 24433, 12041, 2094810, 223929, 97356, 108656, 75158, 6662, 6102, 57591, 33013, 32476], [0, 186015, 136282, 148228, 27122, 11683, 1049490, 535185, 69866, 55882, 51027, 2351, 2395, 42058, 7931, 121063], [0, 151149, 144949, 147822, 17430, 12204, 1475281, 301925, 61252, 47342, 89010, 2520, 3622, 32550, 51718, 15719]]
Sizenum=[[60484200, 100289, 175575, 189907, 68373, 8748, 1208032, 156253, 67883, 40428, 76143, 4397, 4546, 24518, 481655, 20221], [51385009, 112070, 91063, 127001, 9381, 7675, 875858, 183346, 54347, 50692, 40680, 1689, 2249, 23537, 76022, 43541], [46230416, 156393, 71494, 123604, 99902, 8855, 1188065, 133737, 127568, 52836, 24312, 3309, 1402, 49226, 78347, 16102], [85081551, 493134, 431918, 418168, 64894, 25829, 1835415, 388570, 189574, 85495, 150402, 8091, 8982, 77543, 110488, 21050], [47749963, 70199, 84903, 90211, 14623, 1475, 670825, 116369, 19742, 29323, 41107, 1378, 1839, 31939, 20553, 10943], [55167430, 91054, 76710, 71175, 19918, 5393, 769845, 178594, 52644, 54039, 40276, 2240, 2883, 20863, 56293, 13747], [47550663, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [47550663, 103107, 74089, 83231, 2275, 1340, 697432, 168948, 21281, 27505, 43847, 1123, 1047, 19246, 110614, 49644], [48529436, 92173, 51525, 48218, 2892, 6666, 736966, 335660, 53407, 37438, 45065, 1549, 1497, 50996, 109095, 32457], [49268910, 120007, 126578, 111685, 63734, 2712, 1111045, 217324, 46641, 44997, 74289, 3263, 3370, 48103, 54790, 17240], [60753855, 125060, 70373, 80605, 24772, 5605, 991234, 250803, 49823, 37998, 39722, 2843, 2832, 32756, 47419, 5644], [48072156, 66979, 104622, 124053, 14011, 1215, 755844, 173421, 25236, 40650, 49395, 1462, 2567, 41530, 18094, 53981], [59604427, 116913, 68706, 74100, 32115, 8885, 858471, 302284, 77937, 37157, 53292, 1807, 2835, 28409, 50988, 23370], [46625144, 37344, 77777, 84215, 1261, 574355, 108420, 29550, 25562, 53444, 1484, 2293, 36413, 106140, 12342], [49276869, 140472, 67773, 63496, 16175, 10155, 760832, 109481, 52189, 58763, 53738, 1755, 1941, 27300, 60925, 23000], [46502895, 257078, 173651, 158715, 5159, 5083, 1305801, 140913, 42004, 44747, 84003, 4134, 4634, 53481, 87874, 85220], [79750180, 119110, 104151, 116665, 15642, 18170, 1015665, 598420, 102248, 55076, 71260, 2444, 2761, 39304, 178177, 123943], [51049409, 224578, 89340, 102612, 11224, 6792, 866308, 238801, 58673, 52208, 80075, 1690, 2270, 38474, 136614, 125092], [52951163, 105118, 151221, 176960, 20507, 6929, 1312595, 175735, 64811, 49962, 57991, 1616, 3851, 39652, 230504, 94841], [58210429, 54217, 95992, 126582, 471, 7781, 657371, 85358, 59083, 31684, 26427, 2118, 2725, 22929, 185872, 3185], [79185028, 209141, 396271, 328093, 73998, 14243, 2313931, 571868, 151127, 142322, 165994, 6914, 7739, 75911, 210127, 295517], [52137750, 147460, 87649, 80204, 17295, 8723, 817263, 149045, 59372, 37822, 48810, 1576, 2203, 28545, 24799, 25468], [45106434, 118072, 124845, 114323, 12741, 628, 795284, 91384, 30862, 61614, 65221, 2077, 2117, 33949, 20600, 15945], [79739469, 242048, 131566, 158083, 70847, 25284, 1429192, 683766, 228366, 72317, 47442, 3997, 4257, 123412, 100465, 39137], [52650429, 59083, 60969, 66341, 5862, 5032, 509662, 138057, 34886, 29940, 39227, 1421, 1508, 24868, 37640, 9059], [49396848, 132733, 69660, 112073, 8659, 2233, 739734, 102716, 36504, 24967, 37933, 2107, 1312, 27724, 19076, 10585], [56886529, 120505, 104827, 99435, 4845, 3823, 916856, 634559, 40140, 43405, 70530, 1877, 2087, 27192, 17474, 8316], [30226725, 84077, 72570, 78943, 12255, 8968, 521477, 388604, 61196, 37757, 42977, 777, 1894, 24160, 92271, 64773], [57219043, 102254, 71721, 78202, 15390, 3906, 561002, 81895, 39517, 43845, 42614, 894, 1809, 28383, 44350, 57751], [55844164, 70631, 98823, 121980, 5338, 4007, 743765, 140156, 28651, 34525, 42425, 1864, 2506, 29267, 32773, 12053], [53546943, 72549, 97460, 78896, 4421, 1965, 664182, 180394, 37454, 41415, 54660, 2175, 2689, 17313, 37433, 13683], [21084512, 68007, 29921, 36681, 3450, 1345, 317169, 99226, 13924, 15599, 17981, 571, 576, 10454, 54891, 3645], [46775806, 122353, 71663, 75334, 4804, 2878, 809345, 279250, 20177, 44077, 70466, 2038, 2623, 35176, 28110, 21468], [60273147, 145288, 87608, 92266, 15007, 6543, 725712, 216875, 50526, 34105, 46448, 1429, 2698, 28673, 105140, 100055], [56267711, 160309, 126285, 144341, 31500, 15465, 1231985, 266980, 74626, 67088, 61724, 3184, 2893, 63341, 129766, 73058], [53097961, 192713, 67968, 88425, 1, 9634, 792829, 362652, 72084, 45517, 46126, 2367, 1915, 31478, 20634, 21328], [24524555, 239051, 73864, 74457, 4843, 9353, 954081, 113526, 60278, 47705, 50754, 1785, 2931, 23891, 22598, 10728], [52909226, 230015, 241368, 227830, 28881, 14233, 2476089, 264687, 115076, 128433, 88838, 7875, 7213, 68074, 39022, 38388], [58956985, 241104, 176643, 192126, 35155, 15143, 1360298, 693681, 90557, 72432, 66139, 3048, 3105, 54514, 10281, 156917], [47708051, 108705, 104246, 106312, 12536, 8777, 1061005, 217141, 44052, 34048, 64015, 1813, 2605, 23410, 37195, 11305]]
def fenjie():
    '''for i in range(39):
        if(len(sizenum[i])!=16):
            Final.pop(i)
    for i in sizenum:
        print(len(i))
    print(sizenum)'''
    for i in range(1,16):
        ANswer=[]
        for j in range(len(Final)):
            print(i)
            ANswer.append(Final[j][i])
        #print(ANswer)
        sum=0
        maxx=0
        minn=99999999
        for i in range(len(ANswer)):
            sum+=ANswer[i]
            if(maxx<ANswer[i]):
                maxx=ANswer[i]
            if(minn>ANswer[i]):
                minn=ANswer[i]
        print(sum/len(ANswer),maxx,minn)
if __name__ == '__main__':
    fenjie()


